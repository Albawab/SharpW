@page "/Sparkline/Customization"

@using Syncfusion.EJ2.Blazor.Charts
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.Inputs
@using Syncfusion.EJ2.Blazor.Buttons

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Customization";
    SampleBrowser.CurrentControlName = "Sparkline";
    SampleBrowser.CurrentControlCategory = "Sparkline";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Sparkline;
    SampleBrowser.ActionDescription = new string[] {
@"<p>
	This sample depicts the various customization options available in sparklines.
</p>"
    };
    SampleBrowser.Description = new string[] {
        @" <p>
	In this example, you can see various customization options available in sparklines. Tooltip is enabled in this example. To
	see the tooltip in action, hover the mouse over the data points or tap on a data point in touch enabled devices.
</p> "
    };
}
@*End:Hidden*@

<div class="col-lg-8 control-section sb-property-border">
    <div class="control-section">
        <div id="spark-container" class="row">
            <div class="cols-sample-area" align="center">
                <p>
                    <font size=4> Worldwide car sales by brand - 2017</font>
                </p>
                <table style="width:150%;">
                    <tr>
                        <td align="center">Sales Percentage</td>
                        <td>
                            <div style="height: 200px;width: 200px;margin-left: 10px">
                                <EjsSparkline @ref="@perSparklineRef"  XName="xval" YName="yval" TValue="SparkData" EnableRtl="@perRtl" DataSource=@percentageData Type="@Syncfusion.EJ2.Blazor.Charts.SparklineType.Column" valueType="@Syncfusion.EJ2.Blazor.Charts.SparklineValueType.Category" Width="200px" Height="200px" LineWidth="2">
                                    <SparklineAxisSettings Value="@perAxisValue">
                                        <SparklineAxisLineSettings Visible="@perAxisLineVisible" Color="red" Width="2"  ></SparklineAxisLineSettings>
                                    </SparklineAxisSettings>
                                    <SparklineMarkerSettings Fill="red" Size="5" Visible="@perMarkerVisible"></SparklineMarkerSettings>
                                    <SparklineDataLabelSettings Visible="@perDatalabelVisible"></SparklineDataLabelSettings>
                                    <SparklineTooltipSettings Visible="@perTooltipVisible" Format="${xval}: ${yval}">
                                        <SparklineTrackLineSettings Visible="@perTrackLineVisible" Color="red" Width="1"></SparklineTrackLineSettings>
                                    </SparklineTooltipSettings>
                                </EjsSparkline>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td align="center">Sales Count</td>
                        <td>
                            <div style="height: 200px; width: 200px; margin-left: 10px">
                                <EjsSparkline @ref="@salSparklineRef" XName="xval" YName="yval" TValue="SparkData" DataSource=@salData EnableRtl="@salRtl" Type="@Syncfusion.EJ2.Blazor.Charts.SparklineType.Column" ValueType="@Syncfusion.EJ2.Blazor.Charts.SparklineValueType.Category" Width="200px" Height="200px" LineWidth="2">
                                    <SparklineAxisSettings Value="@salAxisValue">
                                        <SparklineAxisLineSettings Visible="@salAxisLineVisible" Color="red" Width="2"></SparklineAxisLineSettings>
                                    </SparklineAxisSettings>
                                    <SparklineMarkerSettings Visible="@salMarkerVisible" Fill="red" Size="0"></SparklineMarkerSettings>
                                    <SparklineDataLabelSettings Visible="@salDatalabelVisible"></SparklineDataLabelSettings>
                                    <SparklineTooltipSettings Visible="@salTooltipVisible" Format="${xval}: ${yval}">
                                        <SparklineTrackLineSettings Visible="@salTrackLineVisible" Color="red" Width="1"></SparklineTrackLineSettings>
                                    </SparklineTooltipSettings>

                                </EjsSparkline>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    <div style="float: right; margin-right: 10px;">
        Source:
        <a href=" http://carsalesbase.com/global-car-sales-2017" target="_blank">carsalesbase.com</a>
    </div>
</div>
<div class="col-lg-4 property-section">
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table id="property" style="width:100%" title="Properties">
                <tbody>
                    <tr style="height: 30px">
                        <td class="property-text" style="width: 50%">
                            Sparkline
                        </td>
                        <td style="width: 50%">
                            <EjsDropDownList DataSource="@sparklist" Value="@sparkValue" Width="130">
                                <DropDownListEvents TValue="string" ValueChange="@sparkValueChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Sparks"></DropDownListFieldSettings>
                            </EjsDropDownList>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Special Points
                        </td>
                        <td style="width: 50%">
                            <table>
                                <tr>
                                    <td style="padding: 5px;">All</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox ValueChange="@allCheckbox" Checked="@allCheckboxChange"></EjsCheckBox>
                                    </td> &nbsp; &nbsp;
                                    <td style="padding: 5px;">Negative</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox ValueChange="@negativeCheckbox" Checked="@negativeCheckboxChange" Disabled="@negativeCheckboxDisable"></EjsCheckBox>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px;">First</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox  ValueChange="@firstCheckbox" Checked="firstCheckboxChange" Disabled="@firstCheckboxDisable"></EjsCheckBox>
                                    </td>&nbsp; &nbsp;
                                    <td style="padding: 5px;">Last</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox ValueChange="@lastCheckbox" Checked="@lastCheckboxChange" Disabled="@lastCheckboxDisable"></EjsCheckBox>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px;">High</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox  ValueChange="@highCheckbox" Checked="@highCheckboxChange" Disabled="@highCheckboxDisable"></EjsCheckBox>
                                    </td>&nbsp; &nbsp;
                                    <td style="padding: 5px;">Low</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox  ValueChange="@lowCheckbox" Checked="@lowCheckboxChange" Disabled="@lowCheckboxDisable"></EjsCheckBox>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Marker
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="marker" Checked="@markerChanged" ValueChange="@marker"></EjsCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px ; ">
                        <td style="width: 50%">
                            Data Label
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="datalabel" Checked="@datalabelChanged" ValueChange="@datalabel"></EjsCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Enable RTL
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="rtl" Checked="@rtlChanged" ValueChange="@rTL"></EjsCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Tooltip
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="tooltip" Checked="@tooltipChanged" ValueChange="@toolTip"></EjsCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Track Line
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="trackline" Checked="@tracklineChanged" ValueChange="@trackLine"></EjsCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Axis Line
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="axis1" Checked="@axislineChanged" ValueChange="@axisLine"></EjsCheckBox>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Axis Value<span>&nbsp;&nbsp;&nbsp;@axisValueText</span>
                        </td>
                        <td>
                            <div>
                                <input type="range" value="@sliderValue" min="@sliderMin" max="@sliderMax" @oninput="@slider" style="width:250px" />
                            </div>
                        </td>
                    </tr>

                </tbody>
            </table>
        </div>
    </div>
</div>


<style>
    .property-text {
        font-family: "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif" !important;
        font-size: 13px !important;
        font-weight: 400 !important;
    }

    .control-section {
        min-height: 450px;
    }

    #range > * {
        padding: 0px !important;
    }

    label {
        height: 32px !important;
    }
</style>

@code {
    EjsSparkline<SparkData> perSparklineRef;
    EjsSparkline<SparkData> salSparklineRef;
    public Boolean axisVisible = false;
    private Double perAxisMiny = -10;
    private Double perAxisMaxy = 10;
    private Double perAxisValue;
    private String perAxislineColor = "red";
    private Double perAxislineWidth = 2;
    private Double salAxisMiny;
    private Double salAxisMaxy;
    private Double salAxisValue;
    private String salAxislineColor = "red";
    private Double salAxislineWidth = 2;
    private Boolean perAxisLineVisible = false;
    private Boolean perTooltipVisible = false;
    private Boolean perTrackLineVisible = false;
    private Boolean salAxisLineVisible = false;
    private Boolean salTooltipVisible = false;
    private Boolean salTrackLineVisible = false;
    private List<VisibleType> perMarkerVisible { get; set; } = new List<VisibleType>();
    private List<VisibleType> salMarkerVisible { get; set; } = new List<VisibleType>();
    private List<VisibleType> perDatalabelVisible { get; set; } = new List<VisibleType>();
    private List<VisibleType> salDatalabelVisible { get; set; } = new List<VisibleType>();
    private Boolean salRtl = false;
    private Boolean perRtl = false;
    private String sparkValue = "SalesPercentage";
    private Boolean allCheckboxDisable;
    private Boolean negativeCheckboxDisable = true;
    private Boolean lowCheckboxDisable = true;
    private Boolean highCheckboxDisable = true;
    private Boolean firstCheckboxDisable = true;
    private Boolean lastCheckboxDisable = true;
    private Boolean allCheckboxChange = true;
    private Boolean negativeCheckboxChange;
    private Boolean highCheckboxChange;
    private Boolean lowCheckboxChange;
    private Boolean firstCheckboxChange;
    private Boolean lastCheckboxChange;
    private Double sliderValue = 0;
    private Double sliderMin = 0;
    private Double sliderMax = 10;
    private Boolean markerChanged = false;
    private Boolean datalabelChanged;
    private Boolean rtlChanged = false;
    private Boolean tooltipChanged;
    private Boolean tracklineChanged;
    private Boolean axislineChanged;
    private Double axisValueText = 0;
    public class SparkData
    {
        public Double x;
        public string xval;
        public double yval;
    }
    private List<SparkData> percentageData = new List<SparkData>
{
        new SparkData { x = 0, xval = "AUDI", yval = 1  },
        new SparkData { x = 1, xval = "BMW", yval = 5 },
        new SparkData { x = 2, xval = "BUICK", yval = -1 },
        new SparkData { x = 3, xval = "CETROEN", yval = -6 },
        new SparkData { x = 4, xval = "CHEVROLET", yval = 0 },
        new SparkData { x = 5, xval = "FIAT", yval = 1 },
        new SparkData { x = 6, xval = "FORD", yval = -2 },
        new SparkData { x = 7, xval = "HONDA", yval = 7 },
        new SparkData { x = 8, xval = "HYUNDAI", yval = -9 },
        new SparkData { x = 9, xval = "JEEP", yval = 0 },
        new SparkData { x = 10, xval = "KIA", yval = -10 },
        new SparkData { x = 11, xval = "MAZDA", yval = 3 },
        new SparkData { x = 12, xval = "MERCEDES", yval = 13 },
        new SparkData { x = 13, xval = "NISSAN", yval = 5 },
        new SparkData { x = 14, xval = "OPEL/VHALL", yval = -6 },
        new SparkData { x = 15, xval = "PEUGEOT", yval = 0 },
        new SparkData { x = 16, xval = "RENAULT", yval = 7 },
        new SparkData { x = 17, xval = "SKODA", yval = 5 },
        new SparkData { x = 18, xval = "SUBARU", yval = 5 },
        new SparkData { x = 19, xval = "SUZUKI", yval = 11 },
        new SparkData { x = 20, xval = "TOYOTA", yval = 5 },
        new SparkData { x = 21, xval = "VOLKSWAGEN", yval = 3 },
    };
    private List<SparkData> salData = new List<SparkData>
{
        new SparkData { x = 0, xval = "AUDI", yval = 1847613 },
        new SparkData { x = 1, xval = "BMW", yval = 2030331 },
        new SparkData { x = 2, xval = "BUICK", yval = 1465823 },
        new SparkData { x = 3, xval = "CETROEN", yval = 999888 },
        new SparkData { x = 4, xval = "CHEVROLET", yval = 3857388 },
        new SparkData { x = 5, xval = "FIAT", yval = 1503806 },
        new SparkData { x = 6, xval = "FORD", yval = 5953122 },
        new SparkData { x = 7, xval = "HONDA", yval = 4967689 },
        new SparkData { x = 8, xval = "HYUNDAI", yval = 3951176 },
        new SparkData { x = 9, xval = "JEEP", yval = 1390130 },
        new SparkData { x = 10, xval = "KIA", yval = 2511293 },
        new SparkData { x = 11, xval = "MAZDA", yval = 1495557 },
        new SparkData { x = 12, xval = "MERCEDES", yval = 2834181 },
        new SparkData { x = 13, xval = "NISSAN", yval = 4834694 },
        new SparkData { x = 14, xval = "OPEL/VHALL", yval = 996559 },
        new SparkData { x = 15, xval = "PEUGEOT", yval = 1590300 },
        new SparkData { x = 16, xval = "RENAULT", yval = 2275227 },
        new SparkData { x = 17, xval = "SKODA", yval = 1180672 },
        new SparkData { x = 18, xval = "SUBARU", yval = 1050390 },
        new SparkData { x = 19, xval = "SUZUKI", yval = 2891415 },
        new SparkData { x = 20, xval = "TOYOTA", yval = 7843423 },
        new SparkData { x = 21, xval = "VOLKSWAGEN", yval = 6639250 },
    };
    public class SparkList
    {
        public string Sparks { get; set; }
        public string Name { get; set; }
    }
    private List<SparkList> sparklist = new List<SparkList>
{
        new SparkList{Sparks = "SalesPercentage" , Name = "Sales Percentage"},
        new SparkList{Sparks = "SalesCount" , Name = "Sales Count"},
    };
    private void sparkValueChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        sparkValue = (args.Value).ToString();
        if (sparkValue == "SalesPercentage")
        {
            sliderMax = 10;
            sliderMin = 0;
            sliderValue = perAxisValue;
        }
        else
        {
            sliderMax = 5000000;
            sliderMin = 0;
            sliderValue = salAxisValue;
        }
        markerChanged = ((sparkValue == "SalesPercentage" && perMarkerVisible.Count != 0) || (sparkValue == "SalesCount" && salMarkerVisible.Count != 0)) ? true : false;
        datalabelChanged = ((sparkValue == "SalesPercentage" && perDatalabelVisible.Count != 0) || (sparkValue == "SalesCount" && salDatalabelVisible.Count != 0)) ? true : false;
        if (!markerChanged && !datalabelChanged)
        {
            allCheckboxChange = false;
            negativeCheckboxChange = false;
            highCheckboxChange = false;
            lowCheckboxChange = false;
            firstCheckboxChange = false;
            lastCheckboxChange = false;
        }
        if (markerChanged || datalabelChanged)
        {
            if (sparkValue == "SalesPercentage")
            {
                allCheckboxChange = perMarkerVisible.IndexOf(VisibleType.All) > -1;
                negativeCheckboxChange = perMarkerVisible.IndexOf(VisibleType.Negative) > -1;
                highCheckboxChange = perMarkerVisible.IndexOf(VisibleType.High) > -1;
                lowCheckboxChange = perMarkerVisible.IndexOf(VisibleType.Low) > -1;
                firstCheckboxChange = perMarkerVisible.IndexOf(VisibleType.Start) > -1;
                lastCheckboxChange = perMarkerVisible.IndexOf(VisibleType.End) > -1;
            }
            else
            {
                allCheckboxChange = salMarkerVisible.IndexOf(VisibleType.All) > -1;
                negativeCheckboxChange = salMarkerVisible.IndexOf(VisibleType.Negative) > -1;
                highCheckboxChange = salMarkerVisible.IndexOf(VisibleType.High) > -1;
                lowCheckboxChange = salMarkerVisible.IndexOf(VisibleType.Low) > -1;
                firstCheckboxChange = salMarkerVisible.IndexOf(VisibleType.Start) > -1;
                lastCheckboxChange = salMarkerVisible.IndexOf(VisibleType.End) > -1;
            }
        }
        rtlChanged = ((sparkValue == "SalesPercentage" && perRtl) || (sparkValue == "SalesCount" && salRtl)) ? true : false;
        tooltipChanged = ((sparkValue == "SalesPercentage" && perTooltipVisible) || (sparkValue == "SalesCount" && salTooltipVisible)) ? true : false;
        tracklineChanged = ((sparkValue == "SalesPercentage" && perTrackLineVisible) || (sparkValue == "SalesCount" && salTrackLineVisible)) ? true : false;
        axislineChanged = ((sparkValue == "SalesPercentage" && perAxisLineVisible) || (sparkValue == "SalesCount" && salAxisLineVisible)) ? true : false;
        if (sparkValue == "SalesPercentage" && perAxisValue != 0)
        {
            sliderValue = perAxisValue;
            sliderMin = 0;
            sliderMax = 10;
            axisValueText = perAxisValue;
        }
        if (sparkValue == "SalesCount" && salAxisValue != 0)
        {
            sliderValue = salAxisValue;
            sliderMin = 0;
            sliderMax = 5000000;
            axisValueText = salAxisValue;
        }
        allCheckboxChange = !(negativeCheckboxChange || highCheckboxChange || lowCheckboxChange || firstCheckboxChange || lastCheckboxChange);
        negativeCheckboxDisable = highCheckboxDisable = lowCheckboxDisable = firstCheckboxDisable = lastCheckboxDisable = allCheckboxChange;
    }
    private void allCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        allCheckboxChange = args.Checked;
        negativeCheckboxDisable = allCheckboxChange;
        highCheckboxDisable = allCheckboxChange;
        lowCheckboxDisable = allCheckboxChange;
        firstCheckboxDisable = allCheckboxChange;
        lastCheckboxDisable = allCheckboxChange;
        if (sparkValue == "SalesPercentage")
        {
            perMarkerVisible = (allCheckboxChange && markerChanged) ? new List<VisibleType> { VisibleType.All } : (markerChanged) ? getvisible() : new List<VisibleType>();
            perDatalabelVisible = (allCheckboxChange && datalabelChanged) ? new List<VisibleType> { VisibleType.All } : (datalabelChanged) ? getvisible() : new List<VisibleType>();
        }
        if (sparkValue == "SalesCount")
        {
            salMarkerVisible = (allCheckboxChange && markerChanged) ? new List<VisibleType> { VisibleType.All } : (markerChanged) ? getvisible() : new List<VisibleType>();
            salDatalabelVisible = (allCheckboxChange && datalabelChanged) ? new List<VisibleType> { VisibleType.All } : (datalabelChanged) ? getvisible() : new List<VisibleType>();
        }
    }
    private void datalabel(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        datalabelChanged = args.Checked;
        perDatalabelVisible = (sparkValue == "SalesPercentage" && datalabelChanged) ? getvisible() : new List<VisibleType>();
        salDatalabelVisible = (sparkValue == "SalesCount" && datalabelChanged) ? getvisible() : new List<VisibleType>();
    }
    private void negativeCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        negativeCheckboxChange = args.Checked;
        perMarkerVisible = (markerChanged && sparkValue == "SalesPercentage" && negativeCheckboxChange) ? getvisible() : new List<VisibleType> { };
        salMarkerVisible = (markerChanged && sparkValue == "SalesCount" && negativeCheckboxChange) ? getvisible() : new List<VisibleType> { };
        perDatalabelVisible = (datalabelChanged && sparkValue == "SalesPercentage" && negativeCheckboxChange) ? getvisible() : new List<VisibleType> { };
        salDatalabelVisible = (datalabelChanged && sparkValue == "SalesCount" && negativeCheckboxChange) ? getvisible() : new List<VisibleType> { };
    }
    private void lowCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        lowCheckboxChange = args.Checked;
        if (markerChanged && sparkValue == "SalesPercentage") { perMarkerVisible = getvisible(); }
        if (markerChanged && sparkValue == "SalesCount") { salMarkerVisible = getvisible(); }
        if (datalabelChanged && sparkValue == "SalesPercentage") { perDatalabelVisible = getvisible(); }
        if (datalabelChanged && sparkValue == "SalesCount") { salDatalabelVisible = getvisible(); }
    }
    private void highCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        highCheckboxChange = args.Checked;
        if (markerChanged && sparkValue == "SalesPercentage") { perMarkerVisible = getvisible(); }
        if (markerChanged && sparkValue == "SalesCount") { salMarkerVisible = getvisible(); }
        if (datalabelChanged && sparkValue == "SalesPercentage") { perDatalabelVisible = getvisible(); }
        if (datalabelChanged && sparkValue == "SalesCount") { salDatalabelVisible = getvisible(); }
    }

    private void firstCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        firstCheckboxChange = args.Checked;
        if (markerChanged && sparkValue == "SalesPercentage") { perMarkerVisible = getvisible(); }
        if (markerChanged && sparkValue == "SalesCount") { salMarkerVisible = getvisible(); }
        if (datalabelChanged && sparkValue == "SalesPercentage") { perDatalabelVisible = getvisible(); }
        if (datalabelChanged && sparkValue == "SalesCount") { salDatalabelVisible = getvisible(); }
    }

    private void lastCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        lastCheckboxChange = args.Checked;
        if (markerChanged && sparkValue == "SalesPercentage") { perMarkerVisible = getvisible(); }
        if (markerChanged && sparkValue == "SalesCount") { salMarkerVisible = getvisible(); }
        if (datalabelChanged && sparkValue == "SalesPercentage") { perDatalabelVisible = getvisible(); }
        if (datalabelChanged && sparkValue == "SalesCount") { salDatalabelVisible = getvisible(); }
    }
    private void marker(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        markerChanged = args.Checked;
        if (sparkValue == "SalesPercentage")
        {
            if (markerChanged) { perMarkerVisible = getvisible(); }
            else
            {
                perMarkerVisible = new List<VisibleType>
             ();
            }
        }
        if (sparkValue == "SalesCount")
        {
            if (markerChanged) { salMarkerVisible = getvisible(); }
            else
            {
                salMarkerVisible = new List<VisibleType>
                    ();
            }
        }
    }
    private void rTL(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        rtlChanged = args.Checked;
        if (sparkValue == "SalesPercentage")
        {
            perRtl = args.Checked;
        }
        if (sparkValue == "SalesCount")
        {
            salRtl = args.Checked;
        }
    }
    private void toolTip(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        tooltipChanged = args.Checked;
        if (sparkValue == "SalesPercentage")
        {
            perTooltipVisible = args.Checked;
        }
        if (sparkValue == "SalesCount")
        {
            salTooltipVisible = args.Checked;
        }
    }
    private void trackLine(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        tracklineChanged = args.Checked;
        if (sparkValue == "SalesPercentage")
        {
            perTrackLineVisible = args.Checked;
        }
        if (sparkValue == "SalesCount")
        {
            salTrackLineVisible = args.Checked;
        }
    }
    private void axisLine(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        axislineChanged = args.Checked;
        if (sparkValue == "SalesPercentage")
        {
            perAxisLineVisible = axislineChanged;
            perAxislineWidth = 2;
            perAxislineColor = "red";
        }
        if (sparkValue == "SalesCount")
        {
            salAxisLineVisible = axislineChanged;
            salAxislineWidth = 2;
            salAxislineColor = "red";
        }
    }
    private void slider(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        sliderValue = Convert.ToDouble(args.Value);
        if (sparkValue == "SalesPercentage") { perAxisValue = sliderValue; }
        if (sparkValue == "SalesCount") { salAxisValue = sliderValue; }
        axisValueText = sliderValue;
    }
    List<VisibleType> getvisible()
    {
        List<VisibleType> typ = new List<VisibleType> { };
        if (allCheckboxChange) { typ.Add(VisibleType.All); return typ; }
        if (negativeCheckboxChange) { typ.Add(VisibleType.Negative); }
        if (highCheckboxChange) { typ.Add(VisibleType.High); }
        if (lowCheckboxChange) { typ.Add(VisibleType.Low); }
        if (firstCheckboxChange) { typ.Add(VisibleType.Start); }
        if (lastCheckboxChange) { typ.Add(VisibleType.End); }
        return typ;
    }
}