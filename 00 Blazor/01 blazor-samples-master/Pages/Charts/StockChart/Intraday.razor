@page "/StockChart/Intraday"
@using Syncfusion.EJ2.Blazor.Charts
@using Newtonsoft.Json
@{
    SampleBrowser.CurrentSampleName = "Intraday";
    SampleBrowser.CurrentControlName = "StockChart";
    SampleBrowser.CurrentControlCategory = "StockChart";
    SampleBrowser.CurrentControl = SampleBrowser.Config.StockChart;
    SampleBrowser.ActionDescription = new string[] {
         @"<p>
        This sample visualizes the Stock Chart
    </p>"
    };
    SampleBrowser.Description = new string[] {
         @"<p>
        In this example, you can see how to render and configure the Stock Chart
    </p>"
    };
}
@if (dataSource == null)
{
    <div class="stockchartloader"></div>
}
else
{
<EjsStockChart Title="AAPL Stock Price" SeriesType="@nullseries" TrendlineType="@nulltrendline" IndicatorType="@nullindicator" ExportType="@nullexport">
    <StockChartPrimaryXAxis>
        <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
        <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
    </StockChartPrimaryXAxis>
    <StockChartPrimaryYAxis>
        <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle>
        <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
        <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
    </StockChartPrimaryYAxis>
    <StockChartTooltipSettings Enable="false"></StockChartTooltipSettings>
    <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
    <StockChartSeriesCollection>
        <StockChartSeries DataSource="@dataSource" Type="ChartSeriesType.Spline" YName="high"></StockChartSeries>
    </StockChartSeriesCollection>
    <StockChartChartArea>
        <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
    </StockChartChartArea>
    <StockChartPeriods>
        <StockChartPeriod IntervalType="RangeIntervalType.Minutes" Interval="1" Text="1m"></StockChartPeriod>
        <StockChartPeriod IntervalType="RangeIntervalType.Minutes" Interval="30" Text="30m"></StockChartPeriod>
        <StockChartPeriod IntervalType="RangeIntervalType.Hours" Interval="1" Text="1H"></StockChartPeriod>
        <StockChartPeriod IntervalType="RangeIntervalType.Hours" Interval="12" Text="12H" Selected="true"></StockChartPeriod>
        <StockChartPeriod Text="1D"></StockChartPeriod>
    </StockChartPeriods>
</EjsStockChart>
}

@code{
    Random random = new Random();
    public int Value = 80;
    public List<ChartSeriesType> nullseries = new List<ChartSeriesType>() { };
    public List<TrendlineTypes> nulltrendline = new List<TrendlineTypes>() { };
    public List<TechnicalIndicators> nullindicator = new List<TechnicalIndicators>() { };
    public List<ExportType> nullexport = new List<ExportType>() { };
    private List<ChartData> dataSource;
    protected override async Task OnInitializedAsync()
    {
        dataSource = this.GetData();
    }
    List <ChartData> GetData()
    {
        List<ChartData> data = new List<ChartData>();
        for (int i = 1; i < 1440; i++) {
            if (random.Next(-10,10) > .5) {
                this.Value += random.Next(5,10);
            } else {
                this.Value -= random.Next(5,10);
            }
            data.Add(new ChartData
            {
                date = new DateTime(2000, 1, 1).AddHours(0).AddMinutes(i),
                high = this.Value
            });
        }
        return data;
    }
    public class ChartData
    {
        public DateTime date { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
        public double value;
    }

}
