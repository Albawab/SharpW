@page "/Charts/BoxandWhisker"
@using Syncfusion.EJ2.Blazor.Charts
@using Syncfusion.EJ2.Blazor.Buttons

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Box and Whisker";
    SampleBrowser.CurrentControlName = "Chart";
    SampleBrowser.CurrentControlCategory = "Chart";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Chart;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
        This sample visualizes the employees’ age group in various departments of a country with box and whisker type series in the chart. Mode of box and whisker series can be changed by <code>Mode</code> in property panel. To display the <code>mean</code> value in a series, enable the Mean in the property panel.
    </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
       In this example, you can see how to render and configure the box and whisker type charts. Similar to line type series, but
       the area get closed and filled with series color. You can use <code>Border</code>, <code>Fill</code> properties
       to customize the area. <code>Marker</code> and <code>DataLabel</code> are used to represent individual data and its
       value. Legend is enabled in this example with series type shape.
    </p>
    <p>
        Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>"
    };
}
@*End:Hidden*@

<div class="row">
    <div class="col-lg-8 control-section">
        <EjsChart Title="Employee Age Group in Various Department">
            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis EdgeLabelPlacement="EdgeLabelPlacement.Shift" LabelIntersectAction="LabelIntersectAction.Trim" ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.Category">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Minimum="10" Maximum="60" Interval="10" Title="Age">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryYAxis>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@ChartData" XName="x" YName="y" Name="Department" BoxPlotMode="@BoxPlot" ShowMean="@Mean" Type="ChartSeriesType.BoxAndWhisker">
                    <ChartMarker Visible="true" Height="10" Width="10"></ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        </EjsChart>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tr style="height:50px"><th>Properties</th></tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Mode:
                    </div>
                </td>
                <td style="width: 50%;">
                    <div>
                        <select id="SelectMode" @onchange="ChangeMode">
                            <option value="Normal">Normal</option>
                            <option value="Exclusive">Exclusive</option>
                            <option value="Inclusive">Inclusive</option>
                        </select>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>Mean: </div>
                </td>
                <td style="width: 50%;">
                    <div>
                        <EjsCheckBox Checked="@Mean" ValueChange="@IsChecked"></EjsCheckBox>
                    </div>
                </td>
            </tr>
        </table>
    </div>
</div>
@code{
    public bool Mean = true;
    BoxPlotMode BoxPlot = BoxPlotMode.Normal;

    public void ChangeMode(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        this.BoxPlot = (BoxPlotMode)Enum.Parse(typeof(BoxPlotMode), args.Value.ToString(), true);
    }

    private void IsChecked(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        Mean = args.Checked;
    }

    public class BoxandWhiskerData
    {
        public string x { get; set; }
        public double[] y { get; set; }
    }
    public List<BoxandWhiskerData> ChartData = new List<BoxandWhiskerData>
        {
                    new BoxandWhiskerData { x= "Development", y= new double[]{ 22, 22, 23, 25, 25, 25, 26, 27, 27, 28, 28, 29, 30, 32, 34, 32, 34, 36, 35, 38 }},
                    new BoxandWhiskerData { x= "Testing", y= new double[] { 22, 33, 23, 25, 26, 28, 29, 30, 34, 33, 32, 31, 50 }},
                    new BoxandWhiskerData { x= "HR", y= new double[] { 22, 24, 25, 30, 32, 34, 36, 38, 39, 41, 35, 36, 40, 56 } },
                    new BoxandWhiskerData { x= "Finance", y= new double[] { 26, 27, 28, 30, 32, 34, 35, 37, 35, 37, 45 } },
                    new BoxandWhiskerData { x= "R&D", y= new double[] { 26, 27, 29, 32, 34, 35, 36, 37, 38, 39, 41, 43, 58 }},
                    new BoxandWhiskerData { x= "Sales", y= new double[] { 27, 26, 28, 29, 29, 29, 32, 35, 32, 38, 53 }},
                    new BoxandWhiskerData { x= "Inventory", y= new double[] { 21, 23, 24, 25, 26, 27, 28, 30, 34, 36, 38 }},
                    new BoxandWhiskerData { x= "Graphics", y=new double[] { 26, 28, 29, 30, 32, 33, 35, 36, 52 }},
                    new BoxandWhiskerData { x= "Training", y= new double[] { 28, 29, 30, 31, 32, 34, 35, 36 }}
        };
}