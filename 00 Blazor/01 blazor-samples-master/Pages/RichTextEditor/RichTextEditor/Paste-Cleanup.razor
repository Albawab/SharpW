
@page "/RichTextEditor/Paste-Cleanup"

@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@using Syncfusion.EJ2.Blazor.DropDowns

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Paste from MS Word";
    SampleBrowser.CurrentControlName = "RichTextEditor";
    SampleBrowser.CurrentControlCategory = "RichTextEditor";
    SampleBrowser.CurrentControl = SampleBrowser.Config.RichTextEditor;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>This example demonstrates the paste cleanup feature of the Rich Text Editor control. Copy your content from MS Word or other website, and paste it within the editor to cleanup.</p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>The Rich Text Editor allows to paste the HTML content from MS Word or other websites. The editor cleanup the pasted HTML content by considering the following items.</p>
    <ul>
        <li>The unformatted HTML element (MOS XML format) content to standard HTML elements.</li>
        <li>The MS Office prefixed style properties is converted to proper CSS style properties.</li>
        <li>The unwanted tags, CSS styles, and comments are removed from the copied content.</li>
    </ul>
    <p>The following settings are available to cleanup the content in pasteCleanup settings property:</p>
    <ul>
        <li>Select any option in <code>Format Option</code> drop down list for the paste content.
            <ul>
                <li>Select the <code>Prompt</code> option to invoke prompt dialog with paste options on pasting the content in editor.</li>
                <li>Select the <code>Plain Text</code> option to paste the content as plain text.</li>
                <li>Select the <code>Keep Format</code> option to keep the same format in the copied content.</li>
                <li>Select the <code>Clean Format</code> option to remove the style format in the copied content.</li>
            </ul>
        </li>
        <li>Fill the <code>denied tags</code> text box to ignore the tags when pasting HTML content. For example:
            <ul>
                <li><code>['a[!href]']</code> - paste the content by filtering anchor tags that don’t have the 'href' attribute.</li>
                <li><code>['a[href, target]']</code> - paste the content by filtering anchor tags that have the 'href' and 'target' attributes.</li>
            </ul>
        </li>
        <br/>
        <li>Fill the <code>denied attributes</code> to paste the content by filtering out these attributes from the content. For example:
            <ul>
                <code>['id', 'title']</code> - This will remove the attributes 'id' and 'title' from all tags.
            </ul>
        </li>
        <br/>
        <li>Fill the <code>allowed style properties</code> to paste the content by accepting these style attributes and removing other attributes. For example:
            <ul>
                <code>['color', 'margin']</code> - This will allow only the style properties 'color' and 'margin' in each pasted element.
            </ul>
        </li>
    </ul>"
    };
}
@*End:Hidden*@

<div class="col-lg-8 control-section">
    <div class="control-section">
        <EjsRichTextEditor @ref="RteObj" ID="defaultRte" value="@value">
            <RichTextEditorPasteCleanupSettings Prompt="@Prompt" PlainText="@Plaintext" KeepFormat="@Keepformat" DeniedAttrs="@Deniedattr" AllowedStyleProps="@Allowedstyle" DeniedTags="@Deniedtags"></RichTextEditorPasteCleanupSettings>
        </EjsRichTextEditor>
    </div>
</div>
<div class="col-lg-4 property-section">
    <div title="Properties">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td>
                        <div>Format Option</div>
                    </td>
                    <td>
                        <div>
                            <EjsDropDownList @ref="DropObj" TValue="string" PopupHeight="200px" Index="@index" DataSource="@Options">
                                <DropDownListEvents TValue="string" ValueChange="valueChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
                            </EjsDropDownList>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Denied Tags </div>
                    </td>
                    <td>
                        <div>
                            <input id="deniedTags" type="text" @bind="@deniedTagsvalue" class="e-input" @onblur="deniedTagsblur" placeholder="img[!href], h1" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Denied Attributes </div>
                    </td>
                    <td>
                        <div>
                            <input id="deniedAttributes" type="text" @bind="@deniedAttributesvalue" class="e-input" @onblur="deniedAttributesblur" placeholder="id, title" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Allowed Style Properties </div>
                    </td>
                    <td>
                        <div>
                            <input id="allowedStyleProperties" type="text" @bind="@allowedStylePropertiesvalue" class="e-input" @onblur="allowedStylePropertiesblur" placeholder="href, style" />
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<style>
    .property-section table td {
        width: 50%;
    }

    .property-section table div {
        padding-left: 10px;
        padding-top: 10px;
    }
</style>

@code {

    EjsRichTextEditor RteObj;
    EjsDropDownList<string> DropObj;

    public string deniedTagsvalue;
    public string deniedAttributesvalue;
    public string allowedStylePropertiesvalue;
    public int? index = 0;
    public bool Prompt = true;
    public bool Plaintext = false;
    public bool Keepformat = false;
    public string[] Deniedattr { get; set; }
    public string[] Allowedstyle { get; set; }
    public string[] Deniedtags { get; set; }

    public class GameFields
    {
        public string ID { get; set; }

        public string Text { get; set; }
    }

    private List<GameFields>
    Options = new List<GameFields>
        () {
        new GameFields(){ ID= "prompt", Text= "Prompt" },
        new GameFields(){ ID= "plainText", Text= "Plain Text" },
        new GameFields(){ ID= "keepFormat", Text= "Keep Format" },
        new GameFields(){ ID= "cleanFormat", Text= "Clean Format" },
                        };

    public void valueChange(@Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        if (args.Value == "prompt")
        {
            this.Prompt = true;
        }
        else if (args.Value == "plainText")
        {
            this.Prompt = false;
            this.Plaintext = true;
        }
        else if (args.Value == "keepFormat")
        {
            this.Prompt = false;
            this.Plaintext = false;
            this.Keepformat = true;
        }
        else if (args.Value == "cleanFormat")
        {
            this.Prompt = false;
            this.Plaintext = false;
            this.Keepformat = false;
        }
    }

    public void deniedTagsblur(Microsoft.AspNetCore.Components.Web.FocusEventArgs e)
    {
        if (this.deniedTagsvalue != null)
        {
            this.Deniedtags = this.deniedTagsvalue.Split(',');
        }
    }

    public void deniedAttributesblur(Microsoft.AspNetCore.Components.Web.FocusEventArgs e)
    {
        if (this.deniedAttributesvalue != null)
        {
            this.Deniedattr = this.deniedAttributesvalue.Split(',');
        }
    }

    public void allowedStylePropertiesblur(Microsoft.AspNetCore.Components.Web.FocusEventArgs e)
    {
        if (this.allowedStylePropertiesvalue != null)
        {
            this.Allowedstyle = this.allowedStylePropertiesvalue.Split(',');
        }
    }

    private string value { get; set; } = @"<p>RichTextEditor is a WYSIWYG editing control which will reduce the effort for users while trying to express their formatting word content as HTML or Markdown format.</p><p><b>Paste Cleanup properties:</b></p><ul><li><p>prompt - specifies whether to enable the prompt when pasting in RichTextEditor.</p></li><li><p>plainText - specifies whether to paste as plain text or not in RichTextEditor.</p></li><li><p>keepFormat- specifies whether to keep or remove the format when pasting in RichTextEditor.</p></li><li><p>deniedTags - specifies the tags to restrict when pasting in RichTextEditor.</p></li><li><p>deniedAttributes - specifies the attributes to restrict when pasting in RichTextEditor.</p></li><li><p>allowedStyleProperties - specifies the allowed style properties when pasting in RichTextEditor.</p></li></ul>";

}
