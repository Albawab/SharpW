@page "/Schedule/VirtualScrolling"

@using Syncfusion.EJ2.Blazor.Schedule

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Virtual Scrolling";
    SampleBrowser.CurrentControlName = "Scheduler";
    SampleBrowser.CurrentControlCategory = "Scheduler";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Schedule;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
            This example illustrates how to dynamically load the resources and events as you scroll through the scheduler.
            All the events in this example are loaded at the initial rendering of scheduler, but the events in the visible
            area alone will be rendered. Here, the scheduler is made to dynamically load 300 resources along with the
            events count of 3600 (300 resources * 12 events).

        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
            In this example, the virtual scrolling option is enabled on timeline month view to load the large number of
            resources and its associated events. To enable the dynamic loading of events and resources in timeline view of
            Scheduler, set the <code>allowVirtualScrolling</code> property to <code>true</code> within the view-specific settings.
        </p>"
    };
}
@*End:Hidden*@

<div class="control-section">
    <div class="content-wrapper">
        <EjsSchedule TValue="EventData" Width="100%" Height="650px" SelectedDate="@(new DateTime(2018, 4, 1))">
            <ScheduleGroup EnableCompactView="false" Resources="@GroupData"></ScheduleGroup>
            <ScheduleResources>
                <ScheduleResource DataSource="@ResourceDatasource" Field="ResourceId" Title="Resource" Name="Resources" TextField="Text" IdField="Id" ColorField="Color" AllowMultiple="true"></ScheduleResource>
            </ScheduleResources>
            <ScheduleEventSettings DataSource="@AppointmentData"></ScheduleEventSettings>
            <ScheduleViews>
                <ScheduleView Option="@View.TimelineMonth" AllowVirtualScrolling="true"></ScheduleView>
            </ScheduleViews>
        </EjsSchedule>
    </div>
</div>
@code{
    static ScheduleData data = new ScheduleData();
    public static List<ResourceData> ResourceDatasource = GenerateResourceData();
    public static List<EventData> AppointmentData = GenerateStaticEvents();
    public string[] GroupData { get; set; } = { "Resources" };
    static public List<ResourceData> GenerateResourceData()
    {
        List<ResourceData> resources = new List<ResourceData>(300);
        var colors = new string[] { "#ff8787", "#9775fa", "#748ffc", "#3bc9db", "#69db7c",
           "#fdd835", "#748ffc", "#9775fa", "#df5286", "#7fa900",
           "#fec200", "#5978ee", "#00bdae", "#ea80fc"};
        for (int a = 1; a <= 300; a++)
        {
            int index = a % colors.Length;
            index = index == 0 ? (colors.Length / a) : index;
            resources.Add(new ResourceData
            {
                Id = a,
                Text = "Resource " + a,
                Color = colors[index]
            });
        }
        return resources;
    }

    public static List<EventData> GenerateStaticEvents()
    {
        DateTime date = new DateTime(2018, 4, 1);
        List<EventData> data = new List<EventData>(3600);
        var id = 1;
        for (var i = 0; i < 300; i++)
        {
            Random random = new Random();
            List<int> listNumbers = new List<int>();
            int[] randomCollection = new int[24];
            int number;
            int max = 30;
            for (int a = 0; a < 12; a++)
            {
                do
                {
                    number = random.Next(max);
                } while (listNumbers.Contains(number));
                listNumbers.Add(number);
                var startDate = date.AddDays(number);
                startDate = startDate.AddMilliseconds((((number % 10) * 10) * (1000 * 60)));
                var endDate = startDate.AddMilliseconds(((1440 + 30) * (1000 * 60)));
                data.Add(new EventData
                {
                    Id = id,
                    Subject = "Event #" + id,
                    StartTime = startDate,
                    EndTime = endDate,
                    IsAllDay = (id % 10 == 0) ? false : true,
                    ResourceId = i + 1
                });
                id++;
            }
        }
        return data;
    }
    public class EventData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public bool IsAllDay { get; set; }
        public int ResourceId { get; set; }
    }

    public class ResourceData
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public string Color { get; set; }
    }
}