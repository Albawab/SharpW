@page "/PivotTable/SummaryCustomization"

@using Syncfusion.EJ2.Blazor.PivotView

@*Hidden:Lines*@
@using ej2_blazor_samples
@using ej2_blazor_productdetails
@{
    SampleBrowser.CurrentSampleName = "Show/Hide Totals";
    SampleBrowser.CurrentControlName = "PivotTable";
    SampleBrowser.CurrentControlCategory = "PivotTable";
    SampleBrowser.CurrentControl = SampleBrowser.Config.PivotTable;
    SampleBrowser.ActionDescription = new string[] {
@"<p>
    This sample demonstrates showing and hiding grand totals and subtotals in rows, columns, or both at runtime.
        Also, end users can specify and hide subtotals of specific fields.
</p>"
};
    SampleBrowser.Description = new string[] {
@"<p>
        You can hide grand totals in row, column, or both, To hide grand totals in both row and column, set the property
        <code>ShowGrandTotals</code> in <code>PivotViewDataSourceSettings</code> to <b>false</b>. To hide the row and column grand totals separately,
        set the property <code>ShowRowGrandTotals</code> and <code>ShowColumnGrandTotals</code> in <code>PivotViewDataSourceSettings</code> to <b>false</b>.
    </p>

    <p>

        You can hide subtotals for specific fields too. To hide subtotals for a specific field, set the
        <code>ShowSubTotals</code> property to <b>false</b> inside the field definition.
    </p>
    <p>In this sample, we can also enable or disable grand total and subtotal via toolbar by defining toolbar option(s) and setting the <code>ShowToolbar</code> property in <code>EjsPivotView</code> to <b>true</b>.</p>"
};
}
@*End:Hidden*@

<div class="control-section">
    <div class="content-wrapper">
        <EjsPivotView TValue="ProductDetails" ShowToolbar="true" Toolbar="@toolbar" Height="340">
            <PivotViewDataSourceSettings DataSource="@data" ExpandAll=false EnableSorting=true ShowGrandTotals=false ShowSubTotals=false>
                <PivotViewColumns>
                    <PivotViewColumn Name="Year"></PivotViewColumn>
                    <PivotViewColumn Name="Quarter"></PivotViewColumn>
                </PivotViewColumns>
                <PivotViewRows>
                    <PivotViewRow Name="Country"></PivotViewRow>
                    <PivotViewRow Name="Products"></PivotViewRow>
                </PivotViewRows>
                <PivotViewValues>
                    <PivotViewValue Name="Sold" Caption="Units Sold"></PivotViewValue>
                    <PivotViewValue Name="Amount" Caption="Sold Amount"></PivotViewValue>
                </PivotViewValues>
                <PivotViewFilters>
                    <PivotViewFilter Name="Product_Categories" Caption="Product Categories"></PivotViewFilter>
                </PivotViewFilters>
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="Amount" Format="C" UseGrouping=true></PivotViewFormatSetting>
                    <PivotViewFormatSetting Name="Sold" Format="N" UseGrouping=true></PivotViewFormatSetting>
                </PivotViewFormatSettings>
                <PivotViewDrilledMembers>
                    <PivotViewDrilledMember Name="Country" Items="@(new string[] { "France" })"></PivotViewDrilledMember>
                </PivotViewDrilledMembers>
            </PivotViewDataSourceSettings>
            <PivotViewGridSettings ColumnWidth="140"></PivotViewGridSettings>
        </EjsPivotView>
    </div>
</div>

<style>
    .e-pivotview {
        min-height: 200px;
    }
</style>

@code{
    public List<ToolbarItems> toolbar = new List<ToolbarItems> {
        ToolbarItems.SubTotal,
        ToolbarItems.GrandTotal
    };

    public List<ProductDetails> data { get; set; }

    protected override void OnInitialized()
    {
        this.data = ProductDetails.GetProductData();
    }

}