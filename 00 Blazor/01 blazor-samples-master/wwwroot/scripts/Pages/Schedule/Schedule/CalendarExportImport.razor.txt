@page "/Schedule/CalendarExportImport"

@using Syncfusion.EJ2.Blazor.Schedule
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.Inputs

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "CalendarExportImport";
    SampleBrowser.CurrentControlName = "Scheduler";
    SampleBrowser.CurrentControlCategory = "Scheduler";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Schedule;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
            This example showcases how to export the Scheduler events to a calendar (.ics) file, as well as how to import
            events from an .ics file (downloaded from any of the calendars like Google or Outlook) into our Scheduler.
        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
           In this example, the Scheduler events can be exported to a calendar (.ics) file by making use of the
            <code>ExportToICalendar</code> public method. By default,
            the calendar is exported with a file name <code>Calendar.ics</code>.
            To change this file name on export, pass the custom string value as <code>FileName</code> to get the file
            downloaded with this provided name.
            The events from external calendars can also be imported into Scheduler by making use of the
            <code>ImportICalendar</code> method. This method accepts the blob object of an .ics file to be imported as a
            mandatory argument.
        </p>"
    };
}
@*End:Hidden*@
<div class="col-lg-9 control-section">
    <div class="schedule-wrapper">
        <EjsSchedule @ref="ScheduleRef" TValue="ScheduleData.AppointmentData" Width="100%" Height="650px" SelectedDate="@(new DateTime(2019, 1, 10))">
            <ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
        </EjsSchedule>
    </div>
</div>
<div class="col-lg-3 property-section">
    <div class="property-panel-header">Properties</div>
    <div class="property-panel-content">
        <table id='property' title='Properties' class='property-panel-table' style="width: 100%;">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>Export as iCalendar</div>
                    </td>
                    <td style="width: 50%;">
                        <div width='300px'>
                            <EjsButton Content="Export" OnClick="OnExportToICalendar"></EjsButton>
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>Import iCalendar file</div>
                    </td>
                    <td style="width: 50%;">
                        <div width='300px' class='upload_wrapper'>
                            <EjsUploader AllowedExtensions=".ics" CssClass="calendar-import" ShowFileList="false" Multiple="false">
                                <UploaderButtonsProps Browse="Choose file"></UploaderButtonsProps>
                                <UploaderEvents FileSelected="OnFileSelected"></UploaderEvents>
                            </EjsUploader>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
<style>

    .calendar-import.e-upload {
        border: 0;
        padding-left: 0 !important;
    }

        .calendar-import.e-upload .e-file-select-wrap {
            padding: 0
        }

            .calendar-import.e-upload .e-file-select-wrap .e-file-drop {
                display: none;
            }
</style>

@code{
    EjsSchedule<ScheduleData.AppointmentData> ScheduleRef;
    public List<ScheduleData.AppointmentData> DataSource = new ScheduleData().GetScheduleData();

    public void OnExportToICalendar()
    {
        ScheduleRef.ExportToICalendar();
    }

    public void OnFileSelected(SelectedEventArgs args)
    {
        ScheduleRef.ImportICalendar(args.FilesData[0]);
    }
}