@page "/Charts/StochasticChart"
@using Newtonsoft.Json
@using Syncfusion.EJ2.Blazor.Charts
@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Stochastic Indicator";
    SampleBrowser.CurrentControlName = "Chart";
    SampleBrowser.CurrentControlCategory = "Chart";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Chart;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
        This sample illustrates a stock chart with candle series and an Stochastic indicator. Trackball shows the information about the stock and indicator value of a day.
    </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
         In this example, you can see how to render and configure the Stochastic Indicator.You can use <code>Border</code>,
            <code>Fill</code> properties to customize the area.
    </p>
    <p>
        Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>"
    };
}
@*End:Hidden*@
@if (indicatorData == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="control-section">
        <EjsChart Title="AAPL - 2012-2017">
            <ChartPrimaryXAxis ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime" ZoomFactor=0.2 ZoomPosition=0.6>
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Title="Price" LabelFormat="${value}M" Minimum=50
                               Maximum=170 Interval=30 RowIndex=1 OpposedPosition=true>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryYAxis>
            <ChartAxes>
                <ChartAxis Name="secondary" OpposedPosition=true RowIndex=0 Interval=60
                           Minimum=0 Maximum=120 Title="Stochastic">
                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                    @*<ChartStripLines>
                            <ChartStripLine ZIndex="ZIndex.Behind" start="0" end="120" Text="" Color="black" Visible="true" Opacity="0.03"></ChartStripLine>
                        </ChartStripLines>*@
                </ChartAxis>
            </ChartAxes>
            <ChartRows>
                <ChartRow Height="40%"></ChartRow>
                <ChartRow Height="60%"></ChartRow>
            </ChartRows>
            <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
            <ChartLegendSettings Visible="false"></ChartLegendSettings>
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>
            <ChartZoomSettings EnablePinchZooming="true" EnableSelectionZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
            <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@indicatorData" XName="x" YName="y" Low="low" High="high" Close="close" Volume="volume" Open="open"
                             Width=2 Name="Apple Inc" Type="ChartSeriesType.Candle" BearFillColor="#2ecd71" BullFillColor="#e74c3d">
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartIndicators>
                <ChartIndicator Type="TechnicalIndicators.Stochastic" Field="FinancialDataFields.Close" YAxisName="secondary" SeriesName="Apple Inc" ShowZones=true OverBought=70 OverSold=30 Fill="#6063ff" Period=3>
                    <ChartIndicatorLowerLine Color="#e74c3d"></ChartIndicatorLowerLine>
                    <ChartIndicatorUpperLine Color="#2ecd71"></ChartIndicatorUpperLine>
                    <ChartIndicatorPeriodLine Color="#f2ec2f"></ChartIndicatorPeriodLine>
                </ChartIndicator>
            </ChartIndicators>
        </EjsChart>
    </div>
}
@code{
    private ChartData[] indicatorData;
    protected override async Task OnInitializedAsync()
    {
        //indicatorData = await Http.GetJsonAsync<ChartData[]>("scripts/chart/financial-data.json");
        indicatorData = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/scripts/chart/financial-data.json"));
    }
    public class ChartData
    {
        public DateTime x { get; set; }
        public double high { get; set; }
        public double low { get; set; }
        public double open { get; set; }
        public double close { get; set; }
        public double volume { get; set; }
    }
}
