@page "/Editors/EditPost"

@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.InPlaceEditor

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Edit Post";
    SampleBrowser.CurrentControlName = "InPlaceEditor";
    SampleBrowser.CurrentControlCategory = "Use Case";
    SampleBrowser.CurrentControl = SampleBrowser.Config.InPlaceEditor;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
        This sample demonstrates the default functionalities of the In-place Editor component. Click on the dotted input element to switch to the editable state and save or cancel it by clicking the actions buttons.
    </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
        The <code>In-place Editor</code> component is used to edit values in place and update them to the server.
    </p>
    <p>
        <code>In-place Editor</code> modes can be switched by selecting the appropriate values provided in a drop-down. The applicable editor positions are as follows:
    </p>
    <p>
        <ul>
            <li>
                Inline
            </li>
            <li>
                Pop-up
            </li>
        </ul>
    </p>
    <p>
        The edit on modes of In-place editor can be switched by selecting the appropriate values provided in a drop-down. The applicable modes are as follows:
        <ul>
            <li>Click - Editor opens the edit input with single click of textbox.</li>
            <li>DblClick - Editor opens the edit input with double click of textbox.</li>
            <li>EditIconClick - Edit mode can be open with the use of edit icon only which is visible on hover of textbox.</li>
        </ul>
    </p>
    <p>
        The Save and Cancel buttons of the <code>In-place Editor</code> component can be shown or hidden by switching the Show Button check box state. If the action buttons are hidden, then you can save the data by clicking outside the target or by pressing the Enter key. You can cancel the edit request by pressing the Esc key.
    </p>
    <p>
        More information on the <code>In-place Editor</code> instantiation can be found in the <a target=""_blank"" href=""https://ej2.syncfusion.com/blazor/documentation/in-place-editor/getting-started/"">documentation section</a>.
    </p>"
    };
}
@*End:Hidden*@

<div class="row">
    <div class="col-lg-8 control-section inplace-editor-control-section form-layout" id='inplace-editor-control'>
        <div class="content-wrapper" style="margin-bottom: 25px">
            <div id="confirmation">
                <div id="submitDialog"></div>
                <form id="formId" class="form-horizontal">
                    <div class="form-group">
                        <label class="col-sm-6 control-label" style="text-align: left;font-size: 14px;">
                            Title
                        </label>
                        <EjsInPlaceEditor Mode="@Mode" EmptyText="Enter your question title" Name="Title" ValidationRules="@TitleValidation" Value="@TitleValue" Model="@TitleData">
                            <InPlaceEditorPopupSettings Model="@TipModel2"></InPlaceEditorPopupSettings>
                        </EjsInPlaceEditor>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-6 control-label" style="text-align: left;font-size: 14px;">
                            Comments
                        </label>
                        <EjsInPlaceEditor Mode="@Mode" Type="InputType.RTE" EditableOn="EditableType.EditIconClick" SubmitOnEnter="false" EmptyText="Enter your comment" Name="RTE" ValidationRules="@CommentValidation" Value="@CommentValue" Model="@CommentData">
                            <InPlaceEditorPopupSettings Model="@TipModel"></InPlaceEditorPopupSettings>
                        </EjsInPlaceEditor>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-6 control-label" style="text-align: left;font-size: 14px;">
                            Tags
                        </label>
                        <EjsInPlaceEditor Mode="@Mode" Type="InputType.MultiSelect" EmptyText="Enter your tags" Name="Tag" ValidationRules="@TagValidation" Value="@TagValue" Model="@TagData">
                            <InPlaceEditorPopupSettings Model="@TipModel3"></InPlaceEditorPopupSettings>
                        </EjsInPlaceEditor>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="col-lg-4 property-section" id="editorProperty">
        <table id="property" title="Properties">
            <tr>
                <td style="width: 50%;">
                    <div>Mode</div>
                </td>
                <td style="width: 50%;">
                    <EjsDropDownList CssClass="form-control" Width="90%" DataSource="@ModeData" @bind-Value="@DropMode">
                        <DropDownListEvents TValue="string" ValueChange="ChangeEditMode"></DropDownListEvents>
                        <DropDownListFieldSettings Text="text" Value="value"></DropDownListFieldSettings>
                    </EjsDropDownList>
                </td>
            </tr>
        </table>
    </div>
</div>

@code {
    private RenderMode Mode = RenderMode.Inline;
    private string TitleValue = "Succinctly E-Book about TypeScript";
    private string CommentValue = "The extensive adoption of JavaScript for application development, and the ability to use HTML and JavaScript to create Windows Store apps, has made JavaScript a vital part of the Windows development ecosystem. Microsoft has done extensive work to make JavaScript easier to use.";
    private object TitleData = new { placeholder = "Enter your question title" };
    private object TipModel = new { width = "50%" };
    private object TipModel2 = new { width = "auto" };
    private object TipModel3 = new { width = "30%" };
    private static string[] Data = new string[] { "Android", "JavaScript", "jQuery", "TypeScript", "Angular", "React", "Vue", "Ionic" };
    private static string[] Validation1 = new string[] { "true", "Enter valid title" };
    private static string[] Validation2 = new string[] { "true", "Enter valid comments" };
    private static string[] Validation3 = new string[] { "true", "Enter valid tags" };
    private string[] TagValue = new string[] { "TypeScript", "JavaScript" };
    private static string[] RteItems = new string[] { "Bold", "Italic", "Underline", "FontColor", "BackgroundColor", "LowerCase", "UpperCase", "|", "OrderedList", "UnorderedList" };
    public object DropMode { get; set; } = "Inline";

    public class InplaceModes
    {
        public string value { get; set; }
        public string text { get; set; }
    }
    List<InplaceModes> ModeData = new List<InplaceModes>()
    {
        new InplaceModes(){ value= "Inline", text= "Inline" },
        new InplaceModes(){ value= "Popup", text= "Popup" }
    };
    private object CommentData = new
    {
        toolbarSettings = new
        {
            enableFloating = false,
            items = RteItems
        }
    };
    private object TitleValidation = new { Title = new { required = Validation1 } };
    private object CommentValidation = new { RTE = new { required = Validation2 } };
    private object TagValidation = new { Tag = new { required = Validation3 } };

    private void ChangeEditMode(ChangeEventArgs<string> args)
    {
        this.Mode = (args.Value.ToString() == "Popup" ? RenderMode.Popup : RenderMode.Inline);
        this.StateHasChanged();
    }
    private object TagData = new
    {
        mode = "Box",
        placeholder = "Enter your tags",
        dataSource = Data
    };

    public class Frameworks
    {
        public string text { get; set; }
    }

    public static List<Frameworks> Places = new List<Frameworks>()
{
        new Frameworks(){ text= "Android" },
        new Frameworks(){ text= "JavaScript" },
        new Frameworks(){ text= "jQuery" },
        new Frameworks(){ text= "TypeScript" },
        new Frameworks(){ text= "Angular" },
        new Frameworks(){ text= "React" },
        new Frameworks(){ text= "Vue" },
        new Frameworks(){ text= "Ionic" }
    };
}

<style>
    .inplace-editor-control-section.form-layout .e-inplaceeditor .e-editable-component .e-clear-icon-hide,
    .e-inplaceeditor-tip .e-editable-component .e-input-group .e-clear-icon.e-clear-icon-hide {
        display: block;
        visibility: hidden;
    }

    /* custom code start */
    .inplace-editor-control-section.form-layout #confirmation {
        max-width: 500px;
        margin: auto;
    }
    /* custom code end */

    .inplace-editor-control-section.form-layout #formId {
        padding-top: 20px;
        margin-bottom: 45px;
        border: 1px solid #ccc;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.36);
        border-radius: 5px;
    }

    .inplace-editor-control-section.form-layout .form-horizontal .form-group {
        margin: 0 20px;
    }

        .inplace-editor-control-section.form-layout .form-horizontal .form-group > * {
            width: 100%;
        }

        .inplace-editor-control-section.form-layout .form-horizontal .form-group:last-child {
            padding-bottom: 40px;
        }

    .inplace-editor-control-section.form-layout .form-title {
        width: 100%;
        text-align: center;
        padding: 10px;
        font-size: 16px;
        font-weight: 500;
        color: rgba(0, 0, 0, 0.70);
    }

    .inplace-editor-control-section.form-layout .submit {
        margin: auto;
        width: 50%;
        text-align: center;
    }

    .inplace-editor-control-section.form-layout .form-horizontal .control-label {
        padding: 15px 15px 15px 0;
        font-weight: 600;
        font-size: 14px;
    }

    @@media (max-width: 768px) {
        .inplace-editor-control-section.form-layout .form-horizontal .control-label {
            padding-top: 7px;
            margin-bottom: 0;
        }
    }

    #editorProperty table td {
        width: 50%;
    }

    #editorProperty table div {
        padding-left: 10px;
        padding-top: 10px;
    }
</style>