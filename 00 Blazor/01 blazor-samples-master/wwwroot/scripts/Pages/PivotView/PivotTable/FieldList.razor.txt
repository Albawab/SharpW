@page "/PivotTable/FieldList"

@using Syncfusion.EJ2.Blazor.PivotView

@*Hidden:Lines*@
@using ej2_blazor_samples
@using ej2_blazor_productdetails
@{
    SampleBrowser.CurrentSampleName = "FieldList";
    SampleBrowser.CurrentControlName = "PivotTable";
    SampleBrowser.CurrentControlCategory = "PivotTable";
    SampleBrowser.CurrentControl = SampleBrowser.Config.PivotTable;
    SampleBrowser.ActionDescription = new string[] {
@"<p>
    This sample demonstrates the grouping bar and field list feature of the pivot table. In the sample, fields are automatically populated
    from the bound data source, and it can be used to create a pivot table at runtime.
</p>"
};
    SampleBrowser.Description = new string[] {
@"<p>The pivot table provides a built-in field list very similar to Microsoft Excel. The top section of the
        field list
        allows the user to add and remove fields. The bottom section of the field list allows the user to rearrange the
        fields
        between different axes, including column, row, value, and filter along with filter and sort options.
        <br>
        <br> To show the field list independently, create as separate component namely
        <code>PivotFieldList</code> and assign data source to its
        <code>DataSourceSettings->DataSource</code> property. Simultaneously pivotgrid will be populated by passing its instance in
        the UpdateView method, inside the
        <code>EnginePopulated</code> event of field list.
        <br />
        <br />
        Additionally, user interface for calculated field, label filter, and value filter features have been enabled in
        this demo by setting the properties
        <code>AllowCalculatedField</code>,
        <code>DataSourceSettings->AllowLabelFilter</code> and <code>DataSourceSettings->AllowValueFilter</code> to true.
    </p>"
};
}
@*End:Hidden*@
<div class="control-section">
    <div class="content-wrapper">
        <EjsPivotView ID="pivotview" TValue="ProductDetails" @ref="pivotView" Height="530">
            <PivotViewEvents TValue="ProductDetails" EnginePopulated="pivotenginepopulated"></PivotViewEvents>
        </EjsPivotView>
        <EjsPivotFieldList TValue="ProductDetails" ID="fieldlist" @ref="fieldList" AllowCalculatedField="true" RenderMode="Mode.Fixed">
            <PivotFieldListDataSourceSettings DataSource="@data" EnableSorting=true AllowLabelFilter="true" AllowValueFilter="true">
                <PivotFieldListColumns>
                    <PivotFieldListColumn Name="Year"></PivotFieldListColumn>
                    <PivotFieldListColumn Name="Quarter"></PivotFieldListColumn>
                </PivotFieldListColumns>
                <PivotFieldListRows>
                    <PivotFieldListRow Name="Country"></PivotFieldListRow>
                    <PivotFieldListRow Name="Products"></PivotFieldListRow>
                </PivotFieldListRows>
                <PivotFieldListValues>
                    <PivotFieldListValue Name="Sold" Caption="Unit Sold"></PivotFieldListValue>
                    <PivotFieldListValue Name="Amount" Caption="Sold Amount"></PivotFieldListValue>
                </PivotFieldListValues>
            </PivotFieldListDataSourceSettings>
            <PivotFieldListEvents TValue="ProductDetails" EnginePopulated="enginepopulated"></PivotFieldListEvents>
        </EjsPivotFieldList>
    </div>
</div>

<style>
    #pivotview {
        width: 57% !important;
        height: 100%;
    }

    #pivotfieldlist {
        width: 41% !important;
        height: 100%;
    }

    .e-pivotview {
        float: left;
        width: 57% !important;
    }

    .e-pivotfieldlist {
        float: right;
        width: 42% !important;
    }

        .e-pivotfieldlist .e-static {
            width: 100% !important;
        }

    .e-pivotview {
        min-height: 200px;
    }
</style>

@code{
    EjsPivotFieldList<ProductDetails> fieldList;
    EjsPivotView<ProductDetails> pivotView;

    public List<ProductDetails> data { get; set; }

    protected override void OnInitialized()
    {
        this.data = ProductDetails.GetProductData();
    }
    public void pivotenginepopulated(EnginePopulatedEventArgs args)
    {
        this.fieldList.Update(this.pivotView);
    }
    public void enginepopulated(EnginePopulatedEventArgs args)
    {
        this.fieldList.UpdateView(this.pivotView);
    }
}