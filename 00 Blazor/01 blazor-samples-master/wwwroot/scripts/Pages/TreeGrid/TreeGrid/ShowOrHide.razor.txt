@page "/TreeGrid/ShowOrHide"

@using Syncfusion.EJ2.Blazor.TreeGrid
@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.Data
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor

@*Hidden:Lines*@
@using ej2_blazor_samples
@using ej2_blazor_selfdata

@{
    SampleBrowser.CurrentSampleName = "Show or Hide Column";
    SampleBrowser.CurrentControlName = "TreeGrid";
    SampleBrowser.CurrentControlCategory = "TreeGrid";
    SampleBrowser.CurrentControl = SampleBrowser.Config.TreeGrid;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
            This sample demonstrates dynamic show/hide columns feature of TreeGrid.
       Select column name from the properties panel and click hide/show to toggle visibility.
        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>The TreeGrid column can be showed/hidden dynamically using <code>ShowColumns
        </code> and <code>HideColumns</code> method of the TreeGrid.</p>
    <p>In this demo, the columns can be showed and hidden by selecting the column name in the dropdown
        and click the Show or Hide buttons to toggle visibility. And the column`s visibility is toggled based on the
        <code>TreeGridColumn->HeaderText</code> value.</p>
    <br/>
    <p>The <code>TreeGridColumn->Visible</code> property specifies the visibility of a column.
    To hide a column at the initial rendering, set the <code>Visible</code> property of TreeGridColumn component to false.</p>"
    };
}
@*End:Hidden*@

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <div class="e-mastertext">Click the switch to toggle visibility</div>
            <div>
                <label class="showhide" style="padding: 10px 5px 10px 0"> Task ID </label>
                <EjsSwitch ValueChange="@((Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args) => { change("Task ID", args); })" @bind-Checked="@check"></EjsSwitch>
                <label class="showhide" style="padding: 10px 5px 10px 40px"> Task Name </label>
                <EjsSwitch ValueChange="@((Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args) => { change("Task Name", args); })" @bind-Checked="@check1"></EjsSwitch>
                <label class="showhide" style="padding: 10px 5px 10px 40px"> Duration </label>
                <EjsSwitch ValueChange="@((Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args) => { change("Duration", args); })" @bind-Checked="@check2"></EjsSwitch>
            </div>
            <EjsTreeGrid DataSource="@TreeGridData" @ref="TreeGrid" IdMapping="TaskID" ParentIdMapping="ParentID" TreeColumnIndex="1" Height="400">
                <TreeGridColumns>
                    <TreeGridColumn Field="TaskID" HeaderText="Task ID" Width="60" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="90"></TreeGridColumn>
                    <TreeGridColumn Field="StartDate" HeaderText=" Start Date" Format="yMd" Type=ColumnType.Date Width="90" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Duration" HeaderText="Duration" Width="80" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Progress" HeaderText="Progress" Width="80"></TreeGridColumn>
                    <TreeGridColumn Field="Priority" HeaderText="Priority" Width="80"></TreeGridColumn>
                </TreeGridColumns>
            </EjsTreeGrid>
        </div>
    </div>
</div>


<style>
    .showhide {
        font-size: 15px;
        font-weight: 200;
    }

    .e-mastertext {
        font-size: 15px;
        font-family: Roboto;
        opacity: 0.87;
        padding: 0.7em;
    }
</style>



@code{

    EjsTreeGrid<SelfReferenceData> TreeGrid;

    Boolean check =  true, check1 = true, check2 = true;

    public void change(string name, Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        if (args.Checked)
        {
            this.TreeGrid.ShowColumns(name);
        }
        else {
            this.TreeGrid.HideColumns(name);
        }
    }
    
    public List<SelfReferenceData> TreeGridData { get; set; }

    protected override void OnInitialized()
    {
        this.TreeGridData = SelfReferenceData.GetTree().Take(50).ToList();
    }
}
