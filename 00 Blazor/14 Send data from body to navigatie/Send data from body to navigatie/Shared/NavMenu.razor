@using Send_data_from_body_to_navigatie.Interfaces
@using Send_data_from_body_to_navigatie.Models
@using Send_data_from_body_to_navigatie.Components
@implements IDisposable
@inject IHandleNavigator handle
<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Send data from body to navigatie</a>
    <button class="navbar-toggler">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

@if (OmschrijvingNavigatorItem != null)
{
<div style="color:white;">
    @if (OmschrijvingNavigatorItem is OmschrijvingNavigatorModel navigatorModel)
    {
        <NavigatieOmschrijvingComponent OmschrijvingNavigatorItem="@navigatorModel"></NavigatieOmschrijvingComponent>
    }
</div>
}

@code {
    OmschrijvingNavigatorModel OmschrijvingNavigatorItem;
    protected override void OnInitialized()
    {
        // Geeft de functie aan de event die gaat werken als ites verandert in de service.
        handle.OnNavigationItemUpdate += (render) => this.OnChangeItem(render);
    }

    private async void OnChangeItem(IHandleNavigator handleNavigator)
    {
        OmschrijvingNavigatorItem = handleNavigator.OmschrijvingNavigatorModel;

        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() => StateHasChanged());
    }
    public void Dispose()
    {
        handle.OnNavigationItemUpdate -= (render) => this.OnChangeItem(render);
    }
}
