@page "/"
@using AutoMapper;
@using _27_Auto_mappen.Data;

<h6>@destination.Id</h6>
<h6>@destination.FirstName</h6>
<h6>@destination.LastName</h6>
<h6>@destination.Address</h6>
<br>
<br>

<h1>Met Object Address</h1>

<h4>@metAddressObject.Id</h4>
<h4>@metAddressObject.FirstName</h4>
<h4>@metAddressObject.LastName</h4>
<h4>@metAddressObject.Address</h4>
<h4>@metAddressObject.AddressObject.City</h4>
<h4>@metAddressObject.AddressObject.Country</h4>
<h4>@metAddressObject.AddressObject.State</h4>
<br>
<br>




<h1>Mappen List</h1>
@foreach (var addressPersists in authorModel.AddressPersists)
{
    <h4>@addressPersists.City</h4>
}



<h1>Met Andere naam van een property.</h1>
<h4>@differentNameFull.Id</h4>
<h4>@differentNameFull.FirstName</h4>
<h4>@differentNameFull.DifferentNamePresist.IdPresist ===============> Hier</h4>

@code{
    AuthorDTO destination;
    AuthorModel metAddressObject;
    AuthorModel authorModel = new AuthorModel();
    AuthorModel differentNameFull = new();
    protected override void OnInitialized()
    {
        var config = new MapperConfiguration(cfg =>
        {
            cfg.CreateMap<AuthorModel, AuthorDTO>();
        });
        IMapper iMapper = config.CreateMapper();
        var source = new AuthorModel();
        source.Id = 1;
        source.FirstName = "Joydip";
        source.LastName = "Kanjilal";
        source.Address = "India";
        destination = iMapper.Map<AuthorModel, AuthorDTO>(source);

        //=========================================================================================================> Letop: De namen.
        var configObject = new MapperConfiguration(cfg =>
        {
            cfg.CreateMap<AuthorDTO, AuthorModel>().ForMember(d => d.AddressObject, map => map.MapFrom(
            source => new AddressFullDto
            {
                City = source.City,
                State = source.State,
                Country = source.Country
            }));
        });

        IMapper iMapperObject = configObject.CreateMapper();
        var sourceObject = new AuthorDTO();
        sourceObject.Id = 3;
        sourceObject.FirstName = "Joydip";
        sourceObject.LastName = "Kanjilal";
        sourceObject.Address = "India";

        sourceObject.City = "Amsterdam";
        sourceObject.Country = "Nederland";
        sourceObject.State = "G";

        AddressFullDto HuidigeAddressObject = new AddressFullDto();
        metAddressObject = iMapperObject.Map<AuthorDTO, AuthorModel>(sourceObject);

        //=========================================================================================================> List;

        var configuration = new MapperConfiguration(cfg => cfg.CreateMap<AddressFullDto, AddressPersist>());
        IMapper iMapperlist = configuration.CreateMapper();

        AuthorDTO authorDTO = new();
        authorDTO.AddressObjects = new() { new AddressFullDto { City = "Amsterdanm" }, new AddressFullDto { City = "Utrecht" }, new AddressFullDto { City = "Alphen a/d /Rijn" } };

        IList<AddressPersist> list = iMapperlist.Map<List<AddressFullDto>, IList<AddressPersist>>(authorDTO.AddressObjects);


        authorModel.AddressPersists = list.ToList();

        //=========================================================================================================> Andere naam;

        var configurationDifferentName = new MapperConfiguration(cfg =>
        {
            cfg.CreateMap<AuthorDTO, AuthorModel>().ForMember(d => d.DifferentNamePresist, map => map.MapFrom(
            source => new DifferentNamePresist
            {
                IdPresist = source.DifferentNameFull.Id
            }));
        });

        IMapper iMapperDifferentName = configurationDifferentName.CreateMapper();

        var authorDTODifferentName = new AuthorDTO();
        authorDTODifferentName.Id = 4;
        authorDTODifferentName.FirstName = "Different Name";
        authorDTODifferentName.LastName = "Different Name";
        authorDTODifferentName.Address = "Different Name";
        authorDTODifferentName.DifferentNameFull = new DifferentNameFull() { Id = 1 };


        differentNameFull = iMapperDifferentName.Map<AuthorDTO, AuthorModel>(authorDTODifferentName);
    }
}
